{"version":3,"file":"static/js/483.28a7e5a8.chunk.js","mappings":"yOAwDA,UAhDqB,SAAHA,GAA4B,IAAtBC,EAAcD,EAAdC,eAChBC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IACpBC,GAAMF,EAAAA,EAAAA,IAAYG,EAAAA,IAClBC,GAAOJ,EAAAA,EAAAA,IAAYK,EAAAA,IACnBC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRZ,EAAe,WACjB,GAAG,CAACA,IAEJ,IAAAa,GAAoCC,EAAAA,EAAAA,UAAS,SAAQC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9CI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAChCI,GAA2BL,EAAAA,EAAAA,UAASX,GAA7BiB,GAAmCJ,EAAAA,EAAAA,GAAAG,EAAA,GAAnB,GACvBE,GAA0BP,EAAAA,EAAAA,UAASN,GAA5Bc,GAAiCN,EAAAA,EAAAA,GAAAK,EAAA,GAAlB,IAEtBT,EAAAA,EAAAA,YAAU,WACW,UAAfK,GACFP,GAASa,EAAAA,EAAAA,IAAa,UACtBtB,EAAS,mBAADuB,OAAoBrB,KACJ,QAAfc,IACTP,GAASa,EAAAA,EAAAA,IAAa,QACtBtB,EAAS,iBAADuB,OAAkBlB,IAE9B,GAAG,CAACL,EAAUgB,EAAYX,EAAKH,EAAOO,IAEtC,IAAMe,EAAY,SAAAC,GAEhB,QAAIA,EADgB,IAAIC,KAAKL,EAAiBF,EAAkB,GAKlE,EAEA,OACEQ,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CACdf,WAAYA,EACZgB,aAAcf,EACdO,UAAWA,EACXS,KAAM,cAERH,EAAAA,EAAAA,KAACI,EAAAA,SAAQ,CAACC,UAAUL,EAAAA,EAAAA,KAACM,EAAAA,EAAM,CAACC,KAAM,aAAeR,UAC/CC,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CAACC,QAAS,CAACtB,EAAeO,SAIzC,C","sources":["pages/CalendarPage/CalendarPage.jsx"],"sourcesContent":["import React, { useState, Suspense, useEffect } from 'react';\nimport { useNavigate, Outlet } from 'react-router-dom';\nimport { CalendarToolbar } from 'layout/CalendarToolbar/CalendarToolbar';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectDay, selectMonth, selectYear } from 'redux/selectors';\nimport { Loader } from 'components/Loader/Loader';\nimport { getUserTasks } from 'redux/tasks/operations';\n\nconst CalendarPage = ({ updatePageName }) => {\n  const navigate = useNavigate();\n  const month = useSelector(selectMonth);\n  const day = useSelector(selectDay);\n  const year = useSelector(selectYear);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    updatePageName('Calendar');\n  }, [updatePageName]);\n\n  const [periodType, setPeriodType] = useState('month');\n  const [currentDateMonth] = useState(month);\n  const [currentDateYear] = useState(year);\n\n  useEffect(() => {\n    if (periodType === 'month') {\n      dispatch(getUserTasks('month'));\n      navigate(`/calendar/month/${month}`);\n    } else if (periodType === 'day') {\n      dispatch(getUserTasks('day'));\n      navigate(`/calendar/day/${day}`);\n    }\n  }, [navigate, periodType, day, month, dispatch]);\n\n  const checkDate = data => {\n    const currentDate = new Date(currentDateYear, currentDateMonth, 2);\n    if (data > currentDate) {\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <>\n      <CalendarToolbar\n        periodType={periodType}\n        changePeriod={setPeriodType}\n        checkDate={checkDate}\n        page={'calendar'}\n      />\n      <Suspense fallback={<Loader type={'suspense'} />}>\n        <Outlet context={[setPeriodType, checkDate]} />\n      </Suspense>\n    </>\n  );\n};\n\nexport default CalendarPage;\n"],"names":["_ref","updatePageName","navigate","useNavigate","month","useSelector","selectMonth","day","selectDay","year","selectYear","dispatch","useDispatch","useEffect","_useState","useState","_useState2","_slicedToArray","periodType","setPeriodType","_useState3","currentDateMonth","_useState5","currentDateYear","getUserTasks","concat","checkDate","data","Date","_jsxs","_Fragment","children","_jsx","CalendarToolbar","changePeriod","page","Suspense","fallback","Loader","type","Outlet","context"],"sourceRoot":""}