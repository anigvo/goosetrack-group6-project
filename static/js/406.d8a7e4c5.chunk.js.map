{"version":3,"file":"static/js/406.d8a7e4c5.chunk.js","mappings":"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","sources":["components/MonthCalendarHead/MonthCalendarHead.styled.jsx","components/MonthCalendarHead/MonthCalendarHead.jsx","../node_modules/date-fns/esm/isMonday/index.js","../node_modules/date-fns/esm/isTuesday/index.js","components/CalendarTable/CalendarTable.styled.jsx","components/CalendarTable/CalendarTable.jsx","../node_modules/date-fns/esm/isSunday/index.js","layout/ChoosedMonth/ChoosedMonth.styled.jsx","layout/ChoosedMonth/ChoosedMonth.jsx","../node_modules/date-fns/esm/endOfMonth/index.js","../node_modules/date-fns/esm/getDaysInMonth/index.js","../node_modules/date-fns/esm/isSameMonth/index.js","../node_modules/date-fns/esm/startOfMonth/index.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { media } from 'utils/queries';\n\nexport const DaysOfWeekList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-gap: 1px;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  padding-top: 14px;\n  padding-bottom: 14px;\n  list-style: none;\n  border: 1px solid ${props => props.theme.calendarBorder};\n  border-radius: 8px;\n  background-color: ${props => props.theme.calendarBackground};\n  text-transform: uppercase;\n  color: ${props => props.theme.calendarTextColor};\n  font-weight: 600;\n  font-family: 'Inter', sans-serif;\n  font-size: 16px;\n  line-height: 1.12;\n  margin-bottom: 14px;\n\n  ${media('tablet', '')`\n  margin-bottom: 18px;\n    `}\n  ${media('desktop', '')`\n  margin-bottom: 15px;\n    `}\n`;\n\nexport const DayOfWeek = styled.li`\n  color: ${props =>\n    props.weekend ? props.theme.calendarWeekend : 'currentColor'};\n`;\n","import React from 'react';\nimport { DaysOfWeekList, DayOfWeek } from './MonthCalendarHead.styled';\n\nexport const MonthCalendarHead = () => {\n  const daysOfWeek = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  const daysOfWeekShort = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];\n\n  return (\n    <DaysOfWeekList>\n      {window.innerWidth < 767\n        ? daysOfWeekShort.map((day, index) => (\n            <DayOfWeek\n              key={index}\n              weekend={index === 5 || index === 6 ? true : false}\n            >\n              {day}\n            </DayOfWeek>\n          ))\n        : daysOfWeek.map((day, index) => (\n            <DayOfWeek\n              key={index}\n              weekend={index === 5 || index === 6 ? true : false}\n            >\n              {day}\n            </DayOfWeek>\n          ))}\n    </DaysOfWeekList>\n  );\n};\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isMonday\n * @category Weekday Helpers\n * @summary Is the given date Monday?\n *\n * @description\n * Is the given date Monday?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Monday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 22 September 2014 Monday?\n * const result = isMonday(new Date(2014, 8, 22))\n * //=> true\n */\nexport default function isMonday(date) {\n  requiredArgs(1, arguments);\n  return toDate(date).getDay() === 1;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isTuesday\n * @category Weekday Helpers\n * @summary Is the given date Tuesday?\n *\n * @description\n * Is the given date Tuesday?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Tuesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 23 September 2014 Tuesday?\n * const result = isTuesday(new Date(2014, 8, 23))\n * //=> true\n */\nexport default function isTuesday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 2;\n}","import styled from '@emotion/styled';\nimport { media } from 'utils/queries';\n\nexport const СalendarGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-gap: 1px;\n  border: 1px solid ${props => props.theme.calendarBorder};\n  border-radius: 8px;\n  overflow: hidden;\n  overflow-x: auto;\n`;\n\nexport const CalendarItem = styled.button`\n  display: flex;\n  flex-direction: column;\n  background-color: ${props => props.theme.calendarBackground};\n  list-style: none;\n  color: ${props => props.theme.calendarTextColor};\n  font-size: 12px;\n  line-height: 1.16;\n  font-weight: 700;\n  font-family: 'Inter', sans-serif;\n  height: 98px;\n  cursor: pointer;\n  border: none;\n  padding: 0;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover:not(:disabled),\n  &:focus:not(:disabled) {\n    background-color: ${props => props.theme.calendarBorderColor};\n  }\n  &:disabled {\n    cursor: default;\n  }\n\n  ${media('tablet', '')`\nheight: 150px;\n  font-size: 16px;\n  line-height: 1.15;\n    `}\n  ${media('desktop', '')`\nheight: 140px;\n    `}\n`;\nexport const CalendarDayWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 4px;\n  padding: 4px 8px;\n  ${media('tablet', '')`\n  padding: 14px;\n    `}\n`;\n\nexport const CalendarDay = styled.div`\n  display: ${props => (props.isCurrentDayMonth ? 'flex' : 'none')};\n  align-items: center;\n  justify-content: center;\n  background-color: ${props =>\n    props.isCurrentDay\n      ? props.theme.btnBackgroundColor\n      : props.theme.calendarBackground};\n  width: 20px;\n  height: 22px;\n  border-radius: 6px;\n  padding: 4px 6px;\n  color: ${props =>\n    props.isCurrentDay\n      ? props.theme.btnTextColor\n      : props.theme.calendarTextColor};\n  ${media('desktop', '')`\n  width: 27px;\n  height: 26px;\n  padding: 4px 8px;\n    border-radius: 8px;\n    `}\n`;\nexport const CalendarTask = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-left: 2px;\n  padding-right: 2px;\n  ${media('tablet', '')`\n  padding-left: 4px;\n  padding-right: 4px;\n    `}\n  ${media('desktop', '')`\n  padding-left: 8px;\n  padding-right: 8px;\n    `}\n`;\n\nexport const CalendarTaskList = styled.ul`\n  text-align: start;\n  list-style: none;\n  width: 100%;\n`;\n\nexport const CalendarTaskItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 4px;\n  }\n  max-width: 42px;\n  width: 42px;\n  font-size: 10px;\n  line-height: 1.4;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-right: 4px;\n  padding-left: 4px;\n  ${media('tablet', '')`\n  max-width: 90px;\n  width: 90px;\n  font-size: 14px;\n  line-height: 1.28;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-right: 10px;\n  padding-left: 10px;\n    `}\n  ${media('desktop', '')`\n  max-width: 147px;\n  width: 147px;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-right: 12px;\n  padding-left: 12px;\n    `}\n  border-radius: 8px;\n  color: ${props =>\n    props.priority === 'low'\n      ? props.theme.calendarLowTaskText\n      : props.priority === 'medium'\n      ? props.theme.calendarMediumTaskText\n      : props.theme.calendarHighTaskText};\n  background-color: ${props =>\n    props.priority === 'low'\n      ? props.theme.calendarLowTaskBackground\n      : props.priority === 'medium'\n      ? props.theme.calendarMediumTaskBackground\n      : props.theme.calendarHighTaskBackground};\n`;\n\nexport const TaskSpan = styled.span`\n  color: ${props => props.theme.calendarTextColor};\n  font-size: 10px;\n  line-height: 1.4;\n  ${media('tablet', '')`\n  font-size: 14px;\n  line-height: 1.28;\n    `}\n`;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  selectFullDate,\n  selectIsLoadingTasks,\n  selectTodosAndInProgress,\n} from 'redux/selectors';\nimport {\n  setCurrentDay,\n  setCurrentMonth,\n  setCurrentYear,\n} from 'redux/tasks/tasksSlice';\nimport {\n  startOfMonth,\n  startOfWeek,\n  isSunday,\n  isMonday,\n  isTuesday,\n  endOfMonth,\n  getDaysInMonth,\n  isSameDay,\n  format,\n  isSameMonth,\n} from 'date-fns';\nimport {\n  СalendarGrid,\n  CalendarDay,\n  CalendarItem,\n  CalendarTask,\n  CalendarDayWrapper,\n  CalendarTaskList,\n  CalendarTaskItem,\n  TaskSpan,\n} from './CalendarTable.styled';\nimport { Loader } from 'components/Loader/Loader';\nexport const CalendarTable = ({ changePeriod }) => {\n  const isLoading = useSelector(selectIsLoadingTasks);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const tasks = useSelector(selectTodosAndInProgress);\n  const reduxDate = useSelector(selectFullDate);\n  const currentDate = new Date(reduxDate);\n  const chooseDay = () => {\n    let startOfMonthDate = startOfMonth(currentDate);\n    let endOfMonthDate = endOfMonth(currentDate);\n    let startOfWeekDate = startOfWeek(startOfMonthDate, { weekStartsOn: 1 });\n    let daysToAdd = 35;\n    if (\n      getDaysInMonth(currentDate) === 28 ||\n      getDaysInMonth(currentDate) === 29\n    ) {\n      if (isMonday(startOfMonthDate)) {\n        return {\n          startOfWeekDate,\n          daysToAdd: 28,\n        };\n      } else if (getDaysInMonth(currentDate) === 29) {\n        return {\n          startOfWeekDate,\n          daysToAdd: 35,\n        };\n      } else {\n        return {\n          startOfWeekDate,\n          daysToAdd: 35,\n        };\n      }\n    } else if (isTuesday(endOfMonthDate) && isMonday(startOfMonthDate)) {\n      daysToAdd = 35;\n    } else if (\n      isSunday(startOfMonthDate) ||\n      isMonday(endOfMonthDate) ||\n      isTuesday(endOfMonthDate)\n    ) {\n      daysToAdd = 42;\n    }\n\n    return {\n      startOfWeekDate,\n      daysToAdd,\n    };\n  };\n\n  const { startOfWeekDate, daysToAdd } = chooseDay();\n\n  const [fixedDate] = useState(currentDate);\n  const day = new Date(startOfWeekDate);\n  const daysArray = [...Array(daysToAdd)].map(() => {\n    const currentDay = new Date(day);\n    day.setDate(day.getDate() + 1);\n    return currentDay;\n  });\n\n  const isCurrentDay = day => isSameDay(day, fixedDate);\n\n  const handleDateClick = date => {\n    const day = date.getDate();\n    changePeriod('day');\n    navigate(`/calendar/day/${day}`);\n    dispatch(setCurrentDay(date.getDate()));\n    dispatch(setCurrentMonth(date.getMonth()));\n    dispatch(setCurrentYear(date.getFullYear()));\n  };\n\n  const filterTasksByDate = (tasks, date) => {\n    return tasks.filter(task => {\n      const taskDate = new Date(task.date);\n      return isSameDay(taskDate, date);\n    });\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader type={'suspense'} />\n      ) : (\n        <СalendarGrid>\n          {daysArray.map(dayItem => {\n            const tasksForDay = filterTasksByDate(tasks, dayItem);\n            return (\n              <CalendarItem\n                key={format(dayItem, 'ddMMyyyy')}\n                onClick={() => handleDateClick(dayItem)}\n                disabled={!isSameMonth(dayItem, currentDate)}\n              >\n                <CalendarDayWrapper>\n                  <CalendarDay\n                    isCurrentDay={isCurrentDay(dayItem)}\n                    isCurrentDayMonth={isSameMonth(dayItem, currentDate)}\n                  >\n                    {format(dayItem, 'd')}\n                  </CalendarDay>\n                </CalendarDayWrapper>\n                <CalendarTask>\n                  <CalendarTaskList>\n                    {isSameMonth(dayItem, currentDate) ? (\n                      <>\n                        {window.innerWidth > 767\n                          ? tasksForDay.slice(0, 2).map((task, index) => (\n                              <CalendarTaskItem\n                                key={index}\n                                id={task._id}\n                                priority={task.priority}\n                                text={task.title}\n                                date={task.date}\n                              >\n                                {task.title}\n                              </CalendarTaskItem>\n                            ))\n                          : tasksForDay.slice(0, 1).map((task, index) => (\n                              <CalendarTaskItem\n                                key={index}\n                                id={task._id}\n                                priority={task.priority}\n                                text={task.title}\n                                date={task.date}\n                              >\n                                {task.title}\n                              </CalendarTaskItem>\n                            ))}\n                        {window.innerWidth > 767 ? (\n                          tasksForDay.length > 2 ? (\n                            <TaskSpan>\n                              ... and {tasksForDay.length - 2} more\n                            </TaskSpan>\n                          ) : null\n                        ) : tasksForDay.length > 1 ? (\n                          <TaskSpan>\n                            ... and {tasksForDay.length - 1} more\n                          </TaskSpan>\n                        ) : null}\n                      </>\n                    ) : null}\n                  </CalendarTaskList>\n                </CalendarTask>\n              </CalendarItem>\n            );\n          })}\n        </СalendarGrid>\n      )}\n    </>\n  );\n};\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSunday\n * @category Weekday Helpers\n * @summary Is the given date Sunday?\n *\n * @description\n * Is the given date Sunday?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 21 September 2014 Sunday?\n * const result = isSunday(new Date(2014, 8, 21))\n * //=> true\n */\nexport default function isSunday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 0;\n}","import styled from '@emotion/styled';\n\nexport const ChoosedMonthContainer = styled.div`\n  width: 100%;\n`;\n","import { useEffect } from 'react';\nimport { useOutletContext } from 'react-router-dom';\nimport { MonthCalendarHead } from '../../components/MonthCalendarHead/MonthCalendarHead';\nimport { CalendarTable } from '../../components/CalendarTable/CalendarTable';\nimport { ChoosedMonthContainer } from './ChoosedMonth.styled';\n\nconst ChoosedMonth = () => {\n  const [setPeriodType] = useOutletContext();\n\n  useEffect(() => {\n    setPeriodType('month');\n  }, [setPeriodType]);\n\n  return (\n    <ChoosedMonthContainer>\n      <MonthCalendarHead />\n      <CalendarTable changePeriod={setPeriodType} />\n    </ChoosedMonthContainer>\n  );\n};\n\nexport default ChoosedMonth;\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * const result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\nexport default function getDaysInMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameMonth\n * @category Month Helpers\n * @summary Are the given dates in the same month (and year)?\n *\n * @description\n * Are the given dates in the same month (and year)?\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same month (and year)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same month?\n * const result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n *\n * @example\n * // Are 2 September 2014 and 25 September 2015 in the same month?\n * const result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))\n * //=> false\n */\nexport default function isSameMonth(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}"],"names":["DaysOfWeekList","styled","_templateObject","_taggedTemplateLiteral","props","theme","calendarBorder","calendarBackground","calendarTextColor","media","_templateObject2","_templateObject3","DayOfWeek","_templateObject4","weekend","calendarWeekend","MonthCalendarHead","_jsx","children","window","innerWidth","map","day","index","isMonday","date","requiredArgs","arguments","toDate","getDay","isTuesday","dirtyDate","СalendarGrid","CalendarItem","calendarBorderColor","CalendarDayWrapper","_templateObject5","_templateObject6","CalendarDay","_templateObject7","isCurrentDayMonth","isCurrentDay","btnBackgroundColor","btnTextColor","_templateObject8","CalendarTask","_templateObject9","_templateObject10","_templateObject11","CalendarTaskList","_templateObject12","CalendarTaskItem","_templateObject13","_templateObject14","_templateObject15","priority","calendarLowTaskText","calendarMediumTaskText","calendarHighTaskText","calendarLowTaskBackground","calendarMediumTaskBackground","calendarHighTaskBackground","TaskSpan","_templateObject16","_templateObject17","CalendarTable","_ref","changePeriod","isLoading","useSelector","selectIsLoadingTasks","navigate","useNavigate","dispatch","useDispatch","tasks","selectTodosAndInProgress","reduxDate","selectFullDate","currentDate","Date","_chooseDay","startOfMonthDate","startOfMonth","endOfMonthDate","endOfMonth","startOfWeekDate","startOfWeek","weekStartsOn","daysToAdd","getDaysInMonth","isSunday","chooseDay","_useState","useState","fixedDate","_slicedToArray","daysArray","_toConsumableArray","Array","currentDay","setDate","getDate","isSameDay","_Fragment","Loader","type","dayItem","tasksForDay","filter","task","taskDate","filterTasksByDate","_jsxs","onClick","concat","setCurrentDay","setCurrentMonth","getMonth","setCurrentYear","getFullYear","handleDateClick","disabled","isSameMonth","format","slice","id","_id","text","title","length","ChoosedMonthContainer","_useOutletContext","useOutletContext","setPeriodType","useEffect","month","setFullYear","setHours","year","monthIndex","lastDayOfMonth","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight"],"sourceRoot":""}