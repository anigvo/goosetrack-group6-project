{"version":3,"file":"static/js/852.03b67313.chunk.js","mappings":"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","sources":["components/StatisticsChart/StatisticsChart.styled.jsx","components/StatisticsChart/StatisticsChart.jsx","pages/StatisticsPage/StatisticsPage.styled.jsx","components/LegendsStatistic/LegendsStatistic.styled.jsx","components/LegendsStatistic/LegendsStatistic.jsx","pages/StatisticsPage/StatisticsPage.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { media } from 'utils/queries';\n\nexport const BoxBar = styled.div`\n    border-radius: 20px;\n    border: 0.8px solid #E3F3FF;  \n    width: 100%;\n    height: 100%;\n    max-width: 307px;  \n    max-height: 413px; \n    \n    \n     \n    ${media('tablet', '')`\n        border-radius: 29px;\n        max-width: 640px;\n        max-height: 424px;\n            \n    `}\n    ${media('desktop', '')`   \n        padding: 20px;     \n        max-width: 860px;\n        max-height: 440px;\n    `}\n`;\n\nexport const BoxPeriodPaginator = styled.div` \n\n     \n    ${media('tablet', '')`\n           \n    `}\n    ${media('desktop', '')`        \n        \n        \n    `}\n`;\nexport const ConteinerData = styled.div` \n   display: flex;\n   flex-direction: column;\n  \n   padding: 0 40px 40px;\n\n     \n    ${media('tablet', '')`\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        padding: 0 40px 40px;\n     `}\n    ${media('desktop', '')`        \n        \n        \n    `}\n`;","\n// import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { BoxBar } from './StatisticsChart.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectMonth,\n  selectDay,\n  selectTasks,\n  // selectCategoryTasks,\n  selectYear,\n} from 'redux/selectors';\nimport { getUserTasks } from 'redux/tasks/operations';\nimport { useEffect } from 'react';\n\n\n\nChart.register(...registerables);\n\nconst StatisticsChart = () => {\n   const month = useSelector(selectMonth);\n   const day = useSelector(selectDay);\n   const year = useSelector(selectYear);\n   const tasks = useSelector(selectTasks);  \n  \n \n  // Використовуємо селектори для отримання необхідних даних\n \n  \n  // const categoryTasks = useSelector(selectCategoryTasks);\n\nconst colorDay = '#FFD2DD';\nconst colorMonth = '#3E85F3';\n\nconst gradientMonth = context => {\n  const chart = context.chart;\n  const { ctx, chartArea } = chart;\n  if (!chartArea) {\n    return null;\n  }\n\n  // Створення градієнта замість кольорів\n  const gradient = ctx.createLinearGradient(\n    0,\n    chartArea.bottom,\n    0,\n    chartArea.top\n  );\n  gradient.addColorStop(0, colorMonth);\n  gradient.addColorStop(1, 'rgba(62, 133, 243, 0.00)');\n\n  return gradient;\n};\n\nconst gradientDay = context => {\n  const chart = context.chart;\n  const { ctx, chartArea } = chart;\n  if (!chartArea) {\n    return null;\n  }\n\n  // Створення градієнта замість кольорів\n  const gradient = ctx.createLinearGradient(\n    0,\n    chartArea.bottom,\n    0,\n    chartArea.top\n  );\n  gradient.addColorStop(0, colorDay);\n  gradient.addColorStop(0.9687, 'rgba(255, 210, 221, 0.00)');\n\n  return gradient;\n};\n\n const todoByDay = tasks.filter(\n   task =>\n     task.category === 'to-do' && task.date.startsWith(`${year}-${month + 1}-${day}`)\n ).length;\n const todoByMonth = tasks.filter(\n   task =>\n     task.category === 'to-do' && task.date.startsWith(`${year}-${month + 1}`)\n ).length;\n const inprogressByDay = tasks.filter(\n   task =>\n     task.category === 'in-progress' && task.date.startsWith(`${year}-${month + 1}-${day}`)\n ).length;\n const inprogressByMonth = tasks.filter(\n   task =>\n     task.category === 'in-progress' &&\n     task.date.startsWith(`${year}-${month + 1}`)\n ).length;\n const doneByDay = tasks.filter(\n   task =>\n     task.category === 'done' && task.date.startsWith(`${year}-${month + 1}-${day}`)\n ).length;\n const doneByMonth = tasks.filter(\n   task =>\n     task.category === 'done' && task.date.startsWith(`${year}-${month + 1}`)\n ).length;\n \n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(\n      getUserTasks({ period: 'month', date: `${year}-${month + 1}-${day}` })\n    );\n  }, [dispatch, year, month, day]);\n\n   const tasksByDay = [todoByDay, inprogressByDay, doneByDay];\n   const tasksByMonth = [todoByMonth, inprogressByMonth, doneByMonth];\n\n    const data = {\n    labels: ['To Do', 'In Progress', 'Done'],\n    datasets: [\n      {\n        label: 'By Day',\n        data: tasksByDay.map(task => (task / tasksByDay.reduce((sum, value) => sum + value, 0)) * 100),\n        display: false,\n        backgroundColor: gradientDay,\n        borderSkipped: false,\n        maxBarThickness: 27,\n        borderRadius: {\n          bottomLeft: 10,\n          bottomRight: 10,\n        },\n      },\n      {\n        label: 'By Month',\n        data: tasksByMonth.map(task => (task / tasksByMonth.reduce((sum, value) => sum + value, 0)) * 100),\n        display: false,\n        backgroundColor: gradientMonth,\n        borderSkipped: false,\n        maxBarThickness: 27,\n        borderRadius: {\n          bottomLeft: 10,\n          bottomRight: 10,\n        },\n      },\n    ],\n  };\n\n  const options = {\n    categoryPercentage: 0.3,\n    barPercentage: 0.9,\n    responsive: true,\n    scales: {\n      x: {\n        ticks: {\n          // This more specific font property overrides the global property\n          font: {\n            size: 14,\n          },\n        },\n        barPercentage: 0.1,\n        drawBorder: false,\n\n        grid: {\n          display: false,\n          offset: true,\n        },\n        border: {\n          display: false,\n        },\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Tasks',\n          position: 'top',\n        },\n        offset: true,\n\n        grid: {\n          color: 'rgba(227, 243, 255, 1)',\n          border: {\n            display: false,\n          },\n          offsetGridLines: true,\n        },\n        border: {\n          display: false,\n        },\n        beginAtZero: true,\n        max: 100,\n        ticks: {\n          max: 100,\n          min: 0,\n          stepSize: 20,\n          font: {\n            size: 14,\n          },\n        },\n      },\n    },\n    layout: {\n      padding: {\n        bottom: 20,\n      },\n    },\n\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n  };\n\n  return (\n    <>\n      <BoxBar>\n        <Bar data={data} options={options} />\n      </BoxBar>\n    </>\n  );\n};\n\nexport default StatisticsChart;\n\n\n\n// ___________________________________________________________________\n// import React, { useState } from 'react';\n// import { Bar } from 'react-chartjs-2';\n// import { Chart, registerables } from 'chart.js';\n\n// import 'react-datepicker/dist/react-datepicker.css';\n// import { BoxBar, ConteinerData, BoxPeriodPaginator } from './StatisticsChart.styled';\n// import { CalendarToolbar } from 'layout/CalendarToolbar/CalendarToolbar';\n// import {\n//   addMonths,\n//   addDays,\n//   /*startOfMonth,\n//   startOfWeek,\n//   isSunday,\n//   isMonday,\n//   isTuesday,\n//   endOfMonth,\n//   getDaysInMonth,*/\n// } from 'date-fns';\n\n// import { useSelector, useDispatch } from 'react-redux';\n// import { setCurrentMonth, setCurrentYear/*, setCurrentDay*/ } from '../../redux/tasks/tasksSlice';\n\n// import {\n//   selectMonth,\n//   selectDay,\n//   selectYear,\n//   selectTasks,\n// } from 'redux/selectors';\n\n// Chart.register(...registerables);\n\n// const StatisticsChart = () => {\n//   const [selectedDate, setSelectedDate] = useState(new Date());\n//   const dispatch = useDispatch();\n//   // const [selectedDate, setSelectedDate] = useState(new Date(today));\n//   const [filterMonth, setFilterMonth] = useState(selectedDate.getMonth());\n//   const [filterYear, setFilterYear] = useState(selectedDate.getFullYear());\n//   // const currentDay = currentDateDay;\n//   // const currentMonth = currentDateMonth;\n//   // const currentYear = new Date().getFullYear();\n\n//   // useEffect(() => {\n//   //   setSelectedDate(today);\n//   // }, [today]);\n\n//   const month = useSelector(selectMonth);\n//   const day = useSelector(selectDay);\n//   const year = useSelector(selectYear);\n//   const tasks = useSelector(selectTasks);\n\n//   const [periodType, setPeriodType] = useState('month');\n//   const [currentDateMonth] = useState(month);\n//   const [currentDateDay] = useState(day);\n//   const [currentDateYear] = useState(year);\n//   const [today, setToday] = useState(new Date(year, month, day));\n\n// //   const chooseDay = () => {\n// //   let startOfMonthDate = startOfMonth(today);\n// //   let endOfMonthDate = endOfMonth(today);\n// //   let startOfWeekDate = startOfWeek(startOfMonthDate, { weekStartsOn: 1 });\n// //   let daysToAdd = 35;\n// //   if (getDaysInMonth(today) === 28 || getDaysInMonth(today) === 29) {\n// //     if (isMonday(startOfMonthDate)) {\n// //       return {\n// //         startOfWeekDate,\n// //         daysToAdd: 28,\n// //       };\n// //     } else if (getDaysInMonth(today) === 29) {\n// //       return {\n// //         startOfWeekDate,\n// //         daysToAdd: 35,\n// //       };\n// //     } else {\n// //       return {\n// //         startOfWeekDate,\n// //         daysToAdd: 35,\n// //       };\n// //     }\n// //   } else if (isTuesday(endOfMonthDate) && isMonday(startOfMonthDate)) {\n// //     daysToAdd = 35;\n// //   } else if (\n// //     isSunday(startOfMonthDate) ||\n// //     isMonday(endOfMonthDate) ||\n// //     isTuesday(endOfMonthDate)\n// //   ) {\n// //     daysToAdd = 42;\n// //   }\n\n// //   return {\n// //     startOfWeekDate,\n// //     daysToAdd,\n// //   };\n// // };\n\n//   // const { startOfWeekDate, daysToAdd } = chooseDay();\n\n//   const prevHandler = () => {\n//   if (periodType === 'month') {\n//     setToday(prev => addMonths(prev, -1));\n//   } else {\n//     setToday(prev => addDays(prev, -1));\n//   }\n// };\n\n// const nextHandler = () => {\n//   if (periodType === 'month') {\n//     setToday(prev => addMonths(prev, 1));\n//   } else {\n//     setToday(prev => addDays(prev, 1));\n//   }\n// };\n\n// const pickHandler = date => {\n//   setToday(date);\n// };\n\n// const checkDate = (data, checkType) => {\n//   const currentDate = new Date(currentDateYear, currentDateMonth, 1);\n//   if (checkType === 'button') {\n//     if (data > currentDate) {\n//       return false;\n//     }\n//     return true;\n//   } else {\n//     if (data >= currentDate) {\n//       return false;\n//     }\n//     return true;\n//   }\n// };\n\n//   const todoByDay = tasks.filter(\n//     task => task.status === 'todo' && task.date === `${year}-${month + 1}-${day}`\n//   ).length;\n//   const todoByMonth = tasks.filter(\n//     task => task.status === 'todo' && task.date.startsWith(`${year}-${month + 1}`)\n//   ).length;\n//   const inprogressByDay = tasks.filter(\n//     task => task.status === 'inProgress' && task.date === `${year}-${month + 1}-${day}`\n//   ).length;\n//   const inprogressByMonth = tasks.filter(\n//     task => task.status === 'inProgress' && task.date.startsWith(`${year}-${month + 1}`)\n//   ).length;\n//   const doneByDay = tasks.filter(\n//     task => task.status === 'done' && task.date === `${year}-${month + 1}-${day}`\n//   ).length;\n//   const doneByMonth = tasks.filter(\n//     task => task.status === 'done' && task.date.startsWith(`${year}-${month + 1}`)\n//   ).length;\n\n//   const handlePrevMonth = () => {\n//     const prevMonthDate = new Date(selectedDate);\n//     prevMonthDate.setMonth(prevMonthDate.getMonth() - 1);\n//     setSelectedDate(prevMonthDate);\n//     setFilterMonth(prevMonthDate.getMonth());\n//     setFilterYear(prevMonthDate.getFullYear());\n//     dispatch(setCurrentMonth(prevMonthDate.getMonth()));\n//     dispatch(setCurrentYear(prevMonthDate.getFullYear()));\n//     prevHandler();\n//   };\n\n//   const handleNextMonth = () => {\n//     const nextMonthDate = new Date(selectedDate);\n//     nextMonthDate.setMonth(nextMonthDate.getMonth() + 1);\n//     setSelectedDate(nextMonthDate);\n//     setFilterMonth(nextMonthDate.getMonth());\n//     setFilterYear(nextMonthDate.getFullYear());\n//     dispatch(setCurrentMonth(nextMonthDate.getMonth()));\n//     dispatch(setCurrentYear(nextMonthDate.getFullYear()));\n//     nextHandler();\n//   };\n\n//   // const handlePrevDay = () => {\n//   //   const prevDayDate = new Date(selectedDate);\n//   //   prevDayDate.setDate(prevDayDate.getDate() - 1);\n//   //   setSelectedDate(prevDayDate);\n//   //   setFilterMonth(prevDayDate.getMonth());\n//   //   dispatch(setCurrentDay(prevDayDate.getDate()));\n//   //   dispatch(setCurrentMonth(prevDayDate.getMonth()));\n//   //   dispatch(setCurrentYear(prevDayDate.getFullYear()));\n//   //   checkDate(prevDayDate);\n//   //   prevHandler();\n//   // };\n\n//   // const handleNextDay = () => {\n//   //   const nextDayDate = new Date(selectedDate);\n//   //   nextDayDate.setDate(nextDayDate.getDate() + 1);\n//   //   setSelectedDate(nextDayDate);\n//   //   setFilterMonth(nextDayDate.getMonth());\n//   //   dispatch(setCurrentDay(nextDayDate.getDate()));\n//   //   dispatch(setCurrentMonth(nextDayDate.getMonth()));\n//   //   dispatch(setCurrentYear(nextDayDate.getFullYear()));\n//   //   checkDate(nextDayDate);\n//   //   nextHandler();\n//   // };\n\n  \n//   const colorDay = '#FFD2DD';\n//   const colorMonth = '#3E85F3';\n\n//   const allTasksByDay = todoByDay + inprogressByDay + doneByDay;\n//   const allTasksByMonth = todoByMonth + inprogressByMonth + doneByMonth;\n\n//   const todoByDayPercent = (todoByDay / allTasksByDay) * 100;\n//   const todoByMonthPercent = (todoByMonth / allTasksByMonth) * 100;\n//   const inprogressByDayPercent = (inprogressByDay / allTasksByDay) * 100;\n//   const inprogressByMonthPercent = (inprogressByMonth / allTasksByMonth) * 100;\n//   const doneByDayPercent = (doneByDay / allTasksByDay) * 100;\n//   const doneByMonthPercent = (doneByMonth / allTasksByMonth) * 100;\n\n//   const gradientMonth = context => {\n//     const chart = context.chart;\n//     const { ctx, chartArea } = chart;\n//     if (!chartArea) {\n//       return null;\n//     }\n\n//     // Створення градієнта замість кольорів\n//     const gradient = ctx.createLinearGradient(\n//       0,\n//       chartArea.bottom,\n//       0,\n//       chartArea.top\n//     );\n//     gradient.addColorStop(0, colorMonth);\n//     gradient.addColorStop(1, 'rgba(62, 133, 243, 0.00)');\n\n//     return gradient;\n//   };\n\n//  const gradientDay = context => {\n//     const chart = context.chart;\n//     const { ctx, chartArea } = chart;\n//     if (!chartArea) {\n//       return null;\n//     }\n\n//     // Створення градієнта замість кольорів\n//     const gradient = ctx.createLinearGradient(\n//       0,\n//       chartArea.bottom,\n//       0,\n//       chartArea.top\n//     );\n//     gradient.addColorStop(0, colorDay);\n//     gradient.addColorStop(0.9687, 'rgba(255, 210, 221, 0.00)');\n\n//     return gradient;\n//   };\n\n//   const data = {\n//     labels: ['To Do', 'In Progress', 'Done'],\n//     datasets: [\n//       {\n//         label: 'By Day',\n//         data: [todoByDayPercent, inprogressByDayPercent, doneByDayPercent],\n//         display: false,\n//         backgroundColor: gradientDay,\n//         borderSkipped: false,\n//         maxBarThickness: 27,\n//         borderRadius: {\n//           bottomLeft: 10,\n//           bottomRight: 10,\n//         },\n//       },\n//       {\n//         label: 'By Month',\n//         data: [todoByMonthPercent, inprogressByMonthPercent, doneByMonthPercent],\n//         display: false,\n//         backgroundColor: gradientMonth,\n//         borderSkipped: false,\n//         maxBarThickness: 27,\n//         borderRadius: {\n//           bottomLeft: 10,\n//           bottomRight: 10,\n//         },\n//       },\n//     ],\n//   };\n\n\n//    const options = {\n//      categoryPercentage: 0.3,\n//      barPercentage: 0.9,\n//      responsive: true,\n//      scales: {\n//        x: {\n//          ticks: {\n//            // This more specific font property overrides the global property\n//            font: {\n//              size: 14,\n//            },\n//          },\n//          barPercentage: 0.1,\n//          drawBorder: false,\n\n//          grid: {\n//            display: false,\n//            offset: true,\n//          },\n//          border: {\n//            display: false,\n//          },\n//        },\n//        y: {\n//          title: {\n//            display: true,\n//            text: 'Tasks',\n//            position: 'top',\n//          },\n//          offset: true,\n\n//          grid: {\n//            color: 'rgba(227, 243, 255, 1)',\n//            border: {\n//              display: false,\n//            },\n//            offsetGridLines: true,\n//          },\n//          border: {\n//            display: false,\n//          },\n//          beginAtZero: true,\n//          max: 100,\n//          ticks: {\n//            max: 100,\n//            min: 0,\n//            stepSize: 20,\n//            font: {\n//              size: 14,\n//            },\n//          },\n//        },\n//      },\n//      layout: {\n//        padding: {\n//          bottom: 20,\n//        },\n//      },\n\n//      plugins: {\n//        legend: {\n//          display: false,\n//        },\n//      },\n//    };\n\n//   return (\n//     <>\n//       {/* <ConteinerData>\n//         <BoxPeriodPaginator>\n//           <CalendarToolbar\n//             prevHandler={handlePrevMonth} // Попередній місяць\n//             // nextHandler={handleNextMonth} // Наступний місяць\n\n//             // pickHandler={pickHandler}\n//             // today={today}\n//             // currentDateMonth={currentDateMonth}\n//             // currentDateDay={currentDateDay}\n//             // periodType={periodType}\n//             // changePeriod={setPeriodType}\n//             // checkDate={checkDate}\n//             // selectedDate={selectedDate}\n//             // setSelectedDate={setSelectedDate}\n//             // filterMonth={filterMonth}\n//             // setFilterMonth={setFilterMonth}\n//             // filterYear={filterYear}\n//             // setFilterYear={setFilterYear}\n//             // handlePrevMonth={handlePrevMonth}\n//             // handleNextMonth={handleNextMonth}\n//             // handlePrevDay={handlePrevDay}\n//             // handleNextDay={handleNextDay}\n//             // // changePeriod={changePeriod}\n//             // currentDay={currentDay}\n//             // pickHandler={pickHandler}\n//           />\n//         {/* </BoxPeriodPaginator> */}\n//         {/* Додайте компонент LegendsStatistic тут, якщо він не був імпортований */}\n//       {/*</ConteinerData> */}\n\n//       <BoxBar>\n//         <Bar data={data} options={options} />\n//       </BoxBar>\n//     </>\n//   );\n// };\n\n// export default StatisticsChart;\n// _________________________________________________________\n","import styled from \"@emotion/styled\";\nimport { media } from 'utils/queries';\n\nexport const BoxStatistics = styled.div` \n    max-width: 335px;        \n    background-color: ${props => props.theme.userAvatarBackground};\n   \n    border-radius: 16px;\n    padding: 128px 14px 175px 14px;\n    width: 100%;\n    ${media('tablet', '')`\n        max-width: 704px;\n        padding: 132px 64px 224px 64px;\n    `}\n    ${media('desktop', '')`        \n        max-width: 1087px;\n        max-height: 752px; \n        padding: 134px 114px 104px 114px;     \n    `}\n`;\nexport const ConteinerData = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 40px 40px;\n\n  ${media('tablet', '')`\n        flex-direction: row;\n        justify-content: space-between;\n        \n        \n     `}\n  ${media('desktop', '')`        \n        \n        \n    `}\n`;\nexport const BoxPeriodPaginator = styled.div`\n  ${media('tablet', '')`\n    \n    `}\n  ${media('desktop', '')`        \n        \n        \n    `}\n`;\n\n","import styled from \"@emotion/styled\";\nimport { media } from 'utils/queries';\n\nexport const LegendsBox = styled.div`\n  display: flex;\n  ap: 20px;\n\n  \n`;\nexport const Legend = styled.div`\n\n\n  display: flex;\n  \n  align-items: center;\n`;\n\n  export const LegendColor = styled.div`\n    width: 8px;\n    height: 8px;\n    margin-right: 10px;\n    border-radius: 50%;\n    ${media('tablet', '')`\n  `}\n    ${media('desktop', '')` \n  `}\n`;\n\n ","import { LegendsBox, Legend, LegendColor } from './LegendsStatistic.styled';\nimport React from 'react'\n\nconst LegendsStatistic = ({data}) => {\n    const colorDay = '#FFD2DD';\n    const colorMonth = '#3E85F3';\n\nconst legendData = [\n  { label: 'By Day', color: colorDay },\n  { label: 'By Month', color: colorMonth },\n];\n\n  return (\n    <LegendsBox>\n      {legendData.map((legend, index) => (\n        <Legend key={index}>\n          <LegendColor          \n            style={{ backgroundColor: legend.color }}\n          ></LegendColor>\n          {legend.label}\n        </Legend>\n      ))}\n    </LegendsBox>\n  );\n};\n\n\nexport default LegendsStatistic","import React, { useEffect, useState } from 'react';\nimport { CalendarToolbar } from 'layout/CalendarToolbar/CalendarToolbar';\nimport StatisticsChart from 'components/StatisticsChart/StatisticsChart';\nimport { useSelector } from 'react-redux';\nimport { selectMonth, selectYear } from 'redux/selectors';\nimport {\n  BoxPeriodPaginator,\n  BoxStatistics,\n  ConteinerData,\n} from './StatisticsPage.styled';\nimport LegendsStatistic from 'components/LegendsStatistic/LegendsStatistic';\n// import { Loader } from 'components/Loader/Loader';\nconst StatisticsPage = ({ updatePageName }) => {\n  const month = useSelector(selectMonth);\n  const year = useSelector(selectYear);\n\n  useEffect(() => {\n    updatePageName('Statistics');\n  }, [updatePageName]);\n\n  const [periodType, setPeriodType] = useState('day');\n  const [currentDateMonth] = useState(month);\n  const [currentDateYear] = useState(year);\n\n  const checkDate = data => {\n    const currentDate = new Date(currentDateYear, currentDateMonth, 2);\n    if (data > currentDate) {\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <BoxStatistics>\n      <ConteinerData>\n        <BoxPeriodPaginator>\n          <CalendarToolbar\n            currentDateMonth={currentDateMonth}\n            currentDateYear={currentDateYear}\n            periodType={periodType}\n            changePeriod={setPeriodType}\n            checkDate={checkDate}\n            page={'statistics'}\n          />\n        </BoxPeriodPaginator>\n        <LegendsStatistic />\n      </ConteinerData>\n      {/* <Suspense fallback={<Loader type={'suspense'} />}>\n        <Outlet\n          context={[\n            startOfWeekDate,\n            daysToAdd,\n            today,\n            setPeriodType,\n            pickHandler,\n            checkDate,\n          ]}\n        />\n      </Suspense> */}\n      <StatisticsChart\n      // todoByDay={todoByDay}\n      // todoByMonth={todoByMonth}\n      // inprogressByDay={inprogressByDay}\n      // inprogressByMonth={inprogressByMonth}\n      // doneByDay={doneByDay}\n      // doneByMonth={doneByMonth}\n      />\n    </BoxStatistics>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["BoxBar","styled","_templateObject","_taggedTemplateLiteral","media","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","Chart","_toConsumableArray","registerables","month","useSelector","selectMonth","day","selectDay","year","selectYear","tasks","selectTasks","todoByDay","filter","task","category","date","startsWith","concat","length","todoByMonth","inprogressByDay","inprogressByMonth","doneByDay","doneByMonth","dispatch","useDispatch","useEffect","getUserTasks","period","tasksByDay","tasksByMonth","data","labels","datasets","label","map","reduce","sum","value","display","backgroundColor","context","chart","ctx","chartArea","gradient","createLinearGradient","bottom","top","addColorStop","borderSkipped","maxBarThickness","borderRadius","bottomLeft","bottomRight","_jsx","_Fragment","children","Bar","options","categoryPercentage","barPercentage","responsive","scales","x","ticks","font","size","drawBorder","grid","offset","border","y","title","text","position","color","offsetGridLines","beginAtZero","max","min","stepSize","layout","padding","plugins","legend","BoxStatistics","props","theme","userAvatarBackground","ConteinerData","BoxPeriodPaginator","LegendsBox","Legend","LegendColor","_ref","legendData","index","_jsxs","style","updatePageName","_useState","useState","_useState2","_slicedToArray","periodType","setPeriodType","_useState3","currentDateMonth","_useState5","currentDateYear","CalendarToolbar","changePeriod","checkDate","Date","page","LegendsStatistic","StatisticsChart"],"sourceRoot":""}