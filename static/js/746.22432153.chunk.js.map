{"version":3,"file":"static/js/746.22432153.chunk.js","mappings":"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","sources":["components/MonthCalendarHead/MonthCalendarHead.styled.jsx","components/MonthCalendarHead/MonthCalendarHead.jsx","components/CalendarTable/CalendarTable.styled.jsx","components/CalendarTable/CalendarTable.jsx","layout/ChoosedMonth/ChoosedMonth.styled.jsx","layout/ChoosedMonth/ChoosedMonth.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const DaysOfWeekList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-gap: 1px;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  padding-top: 14px;\n  padding-bottom: 14px;\n  list-style: none;\n  border: 1px solid ${props => props.theme.calendarBorder};\n  border-radius: 8px;\n  background-color: ${props => props.theme.calendarBackground};\n  text-transform: uppercase;\n  color: ${props => props.theme.calendarTextColor};\n  font-weight: 600;\n  font-family: 'Inter', sans-serif;\n  font-size: 16px;\n  line-height: 1.12;\n  margin-bottom: 15px;\n`;\n\nexport const DayOfWeek = styled.li`\n  color: ${props =>\n    props.weekend ? props.theme.calendarWeekend : 'currentColor'};\n`;\n","import React from 'react';\nimport { DaysOfWeekList, DayOfWeek } from './MonthCalendarHead.styled';\n\nexport const MonthCalendarHead = () => {\n  const daysOfWeek = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n\n  return (\n    <DaysOfWeekList>\n      {daysOfWeek.map((day, index) => (\n        <DayOfWeek\n          key={index}\n          weekend={index === 5 || index === 6 ? true : false}\n        >\n          {day}\n        </DayOfWeek>\n      ))}\n    </DaysOfWeekList>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const СalendarGrid = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-gap: 1px;\n  border: 1px solid ${props => props.theme.calendarBorder};\n  border-radius: 8px;\n  overflow: hidden;\n`;\n\nexport const CalendarItem = styled.li`\n  min-width: 150px;\n  min-height: 125px;\n  background-color: ${props => props.theme.calendarBackground};\n  list-style: none;\n  color: ${props => props.theme.calendarTextColor};\n  padding: 14px;\n  font-size: 16px;\n  line-height: 1.15;\n  font-weight: 700;\n  font-family: 'Inter', sans-serif;\n`;\nexport const CalendarTask = styled.div`\n  justify-content: flex-start;\n`;\nexport const CalendarDayWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 18px;\n`;\n\nexport const CalendarDay = styled.div`\n  display: ${props => (props.isCurrentDayMonth ? 'flex' : 'none')};\n  align-items: center;\n  justify-content: center;\n  background-color: ${props =>\n    props.isCurrentDay\n      ? props.theme.btnBackgroundColor\n      : props.theme.calendarBackground};\n  width: 27px;\n  height: 26px;\n  border-radius: 8px;\n  padding: 4px 8px;\n  color: ${props =>\n    props.isCurrentDay\n      ? props.theme.btnTextColor\n      : props.theme.calendarTextColor};\n`;\n","import React, { useState } from 'react';\nimport {\n  СalendarGrid,\n  CalendarDay,\n  CalendarItem,\n  CalendarTask,\n  CalendarDayWrapper,\n} from './CalendarTable.styled';\nimport { isSameDay, format, isSameMonth } from 'date-fns';\n\nexport const CalendarTable = ({ startOfWeekDate, daysToAdd, today }) => {\n  const [fixedDate] = useState(today);\n  const day = new Date(startOfWeekDate);\n  const daysArray = [...Array(daysToAdd)].map(() => {\n    const currentDay = new Date(day);\n    day.setDate(day.getDate() + 1);\n    return currentDay;\n  });\n\n  const isCurrentDay = day => isSameDay(day, fixedDate);\n\n  return (\n    <СalendarGrid>\n      {daysArray.map(dayItem => (\n        <CalendarItem key={format(dayItem, 'ddMMyyyy')}>\n          <CalendarDayWrapper>\n            <CalendarDay\n              isCurrentDay={isCurrentDay(dayItem)}\n              isCurrentDayMonth={isSameMonth(dayItem, today)}\n            >\n              {format(dayItem, 'd')}\n            </CalendarDay>\n          </CalendarDayWrapper>\n          <CalendarTask />\n        </CalendarItem>\n      ))}\n    </СalendarGrid>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ChoosedMonthContainer = styled.div`\n  width: 100%;\n`;\n","import { useEffect } from 'react';\nimport { useOutletContext } from 'react-router-dom';\nimport { MonthCalendarHead } from '../../components/MonthCalendarHead/MonthCalendarHead';\nimport { CalendarTable } from '../../components/CalendarTable/CalendarTable';\nimport { ChoosedMonthContainer } from './ChoosedMonth.styled';\n\nconst ChoosedMonth = () => {\n  const [startOfWeekDate, daysToAdd, today, setPeriodType] = useOutletContext();\n  useEffect(() => {\n    setPeriodType('month');\n  }, [setPeriodType]);\n  \n  return (\n    <ChoosedMonthContainer>\n      <MonthCalendarHead />\n      <CalendarTable\n        startOfWeekDate={startOfWeekDate}\n        daysToAdd={daysToAdd}\n        today={today}\n      />\n    </ChoosedMonthContainer>\n  );\n};\n\nexport default ChoosedMonth;\n"],"names":["DaysOfWeekList","styled","_templateObject","_taggedTemplateLiteral","props","theme","calendarBorder","calendarBackground","calendarTextColor","DayOfWeek","_templateObject2","weekend","calendarWeekend","MonthCalendarHead","_jsx","children","map","day","index","СalendarGrid","CalendarItem","CalendarTask","_templateObject3","CalendarDayWrapper","_templateObject4","CalendarDay","_templateObject5","isCurrentDayMonth","isCurrentDay","btnBackgroundColor","btnTextColor","CalendarTable","_ref","startOfWeekDate","daysToAdd","today","_useState","useState","fixedDate","_slicedToArray","Date","daysArray","_toConsumableArray","Array","currentDay","setDate","getDate","isSameDay","dayItem","_jsxs","isSameMonth","format","ChoosedMonthContainer","_useOutletContext","useOutletContext","_useOutletContext2","setPeriodType","useEffect"],"sourceRoot":""}