{"version":3,"file":"static/js/852.af2b5a7b.chunk.js","mappings":"oUAGaA,EAASC,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oNAER,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,gBAAgB,IASzDC,EAAAA,EAAAA,GAAM,SAAU,GAAhBA,CAAmBC,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,gJAQnBI,EAAAA,EAAAA,GAAM,UAAW,GAAjBA,CAAoBE,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,kG,GAOUF,EAAAA,EAAAA,IAAUS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,aAGfF,EAAAA,EAAAA,IAAUU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,mHAOjCI,EAAAA,EAAAA,GAAM,SAAU,GAAhBA,CAAmBK,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,8IAMnBI,EAAAA,EAAAA,GAAM,UAAW,GAAjBA,CAAoBM,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,2C,sCCxB1BW,EAAAA,GAAAA,SAAAA,MAAAA,EAAAA,IAAKC,EAAAA,EAAAA,GAAaC,EAAAA,KAClBF,EAAAA,GAAAA,SAAeG,EAAAA,GAEf,I,0BAkWA,EAlWwB,WACtB,IAAMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IACpBC,GAAMJ,EAAAA,EAAAA,IAAYK,EAAAA,IAClBC,GAAON,EAAAA,EAAAA,IAAYO,EAAAA,IACnBC,GAAQR,EAAAA,EAAAA,IAAYS,EAAAA,IAE5BC,GAAsCC,EAAAA,EAAAA,UAASC,OAAOC,YAAWC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAA1DM,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAE5BI,EACG,GADHA,EAEG,GAGHC,EACG,GADHA,EAEG,GAGHC,EACG,GADHA,EAEI,GAFJA,EAGG,GAGDC,EACG,GADHA,EAEG,GAEJC,EACG,GADHA,EAEI,GAFJA,EAGG,KAIRC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,WACnB,IAAMC,EAAWb,OAAOC,WACxBI,EAAeQ,EACjB,EAIA,OAFAb,OAAOc,iBAAiB,SAAUF,GAE3B,WACLZ,OAAOe,oBAAoB,SAAUH,EACvC,CACF,GAAG,IAEH,IAAMI,EAAa,WACjB,OAAIZ,EAAc,IACT,CACLK,gBAAiBA,EACjBH,mBAAoBA,EACpBC,gBAAiBA,GAGZ,CACLE,gBAAiBA,EACjBH,mBAAoBA,EACpBC,gBAAiBA,EAGvB,EACKU,EAAa,WACjB,OAAIb,EAAc,KACT,CACLI,UAAWA,EACXE,mBAAoBA,GAEbN,EAAc,IAChB,CACLI,UAAWA,EACXE,mBAAoBA,GAEbN,EAAc,IAChB,CACLI,UAAWA,EACXE,mBAAoBA,QAHjB,CAMT,EAKOpC,GAAQc,EAAAA,EAAAA,IAAY8B,EAAAA,IACpBC,EACM,UAAV7C,EACI8C,EAAAA,GAAAA,oBACAC,EAAAA,GAAAA,oBAEAC,EACM,UAAVhD,EACI8C,EAAAA,GAAAA,iBACAC,EAAAA,GAAAA,iBAuCAE,EAAY3B,EAAM4B,QAAO,SAAAC,GAC7B,IAAMC,EAAW,IAAIC,KAAKF,EAAKG,MAC/B,MACoB,UAAlBH,EAAKI,UACLH,EAASI,gBAAkBpC,GAC3BgC,EAASK,aAAezC,GACxBoC,EAASM,YAAcxC,CAE3B,IAAGyC,OACGC,EAActC,EAAM4B,QAAO,SAAAC,GAC/B,IAAMC,EAAW,IAAIC,KAAKF,EAAKG,MAC/B,MACoB,UAAlBH,EAAKI,UACLH,EAASI,gBAAkBpC,GAC3BgC,EAASK,aAAezC,CAE5B,IAAG2C,OAEGE,EAAkBvC,EAAM4B,QAAO,SAAAC,GACnC,IAAMC,EAAW,IAAIC,KAAKF,EAAKG,MAC/B,MACoB,gBAAlBH,EAAKI,UACLH,EAASI,gBAAkBpC,GAC3BgC,EAASK,aAAezC,GACxBoC,EAASM,YAAcxC,CAE3B,IAAGyC,OAEGG,EAAoBxC,EAAM4B,QAAO,SAAAC,GACrC,IAAMC,EAAW,IAAIC,KAAKF,EAAKG,MAC/B,MACoB,gBAAlBH,EAAKI,UACLH,EAASI,gBAAkBpC,GAC3BgC,EAASK,aAAezC,CAE5B,IAAG2C,OAEGI,EAAYzC,EAAM4B,QAAO,SAAAC,GAC7B,IAAMC,EAAW,IAAIC,KAAKF,EAAKG,MAC/B,MACoB,SAAlBH,EAAKI,UACLH,EAASI,gBAAkBpC,GAC3BgC,EAASK,aAAezC,GACxBoC,EAASM,YAAcxC,CAE3B,IAAGyC,OAEGK,EAAc1C,EAAM4B,QAAO,SAAAC,GAC/B,IAAMC,EAAW,IAAIC,KAAKF,EAAKG,MAC/B,MACoB,SAAlBH,EAAKI,UACLH,EAASI,gBAAkBpC,GAC3BgC,EAASK,aAAezC,CAE5B,IAAG2C,OAEGM,GAAWC,EAAAA,EAAAA,OACjB7B,EAAAA,EAAAA,YAAU,WACR4B,GACEE,EAAAA,EAAAA,IAAa,CAAEC,OAAQ,QAASd,KAAK,GAADe,OAAKjD,EAAI,KAAAiD,OAAIrD,EAAQ,EAAC,KAAAqD,OAAInD,KAElE,GAAG,CAAC+C,EAAU7C,EAAMJ,EAAOE,IAE3B,IAAMoD,EAAa,CAACrB,EAAWY,EAAiBE,GAC1CQ,EAAe,CAACX,EAAaE,EAAmBE,GAEhDQ,EAAO,CACXC,OAAQ,CAAC,QAAS,cAAe,QACjCC,SAAU,CACR,CACEC,MAAO,SACPH,KAAMF,EAAWM,KAAI,SAAAzB,GACnB,IAAM0B,EAAkBP,EAAWQ,QACjC,SAACC,EAAKC,GAAK,OAAKD,EAAMC,CAAK,GAC3B,GAEF,OAAwB,IAApBH,EACK,EAED1B,EAAO0B,EAAmB,GACpC,IACAI,SAAS,EACTC,gBApGc,SAAAC,GAClB,IAAMC,EAAQD,EAAQC,MACdC,EAAmBD,EAAnBC,IAAKC,EAAcF,EAAdE,UAEb,IAAKA,EACH,OAAO,KAGT,IAAMC,EAASD,EAAUE,OAASF,EAAUG,IACtCA,EAAMH,EAAUG,IAEhBC,EAAWL,EAAIM,qBAAqB,EAAGF,EAAMF,EAAQ,EAAGE,GAI9D,OAHAC,EAASE,aAAa,EA7CP,WA8CfF,EAASE,aAAa,MAAQ,6BAEvBF,CACT,EAqFMG,eAAe,EACf1D,gBAAiBO,IAAaP,gBAC9B2D,aAAc,CACZC,WAAY,GACZC,YAAa,KAGjB,CACErB,MAAO,WACPH,KAAMD,EAAaK,KAAI,SAAAzB,GACrB,IAAM8C,EAAoB1B,EAAaO,QACrC,SAACC,EAAKC,GAAK,OAAKD,EAAMC,CAAK,GAC3B,GAEF,OAA0B,IAAtBiB,EACK,EAED9C,EAAO8C,EAAqB,GACtC,IAEAhB,SAAS,EAETC,gBA9IgB,SAAAC,GACpB,IAAMC,EAAQD,EAAQC,MACdC,EAAmBD,EAAnBC,IAAKC,EAAcF,EAAdE,UACb,IAAKA,EACH,OAAO,KAGT,IAAMI,EAAWL,EAAIM,qBACnB,EACAL,EAAUE,OACV,EACAF,EAAUG,KAKZ,OAHAC,EAASE,aAAa,EA1BL,WA2BjBF,EAASE,aAAa,EAAG,4BAElBF,CACT,EA8HMG,eAAe,EACf1D,gBAAiBO,IAAaP,gBAC9B2D,aAAc,CACZC,WAAY,GACZC,YAAa,OAMfE,EAAU,CACdC,YAAY,EACZC,qBAAqB,EACrBhE,mBAAoBO,IAAaP,mBACjCiE,cAAe,EAEfC,OAAQ,CACNC,EAAG,CACDC,MAAO,CACLC,KAAM,CACJC,KAAMhE,IAAaT,iBAErB0E,MAAO9D,GAGT+D,YAAY,EAEZC,KAAM,CACJ5B,SAAS,EACT6B,QAAQ,GAEVC,OAAQ,CACN9B,SAAS,IAGb+B,EAAG,CACDb,YAAY,EACZW,QAAQ,EACRD,KAAM,CACJF,MAAO3D,EACP+D,OAAQ,CACN9B,SAAS,GAEXgC,UAAW,mBACXC,WAAYvE,IAAaT,UACzBA,UAAWS,IAAaT,UAExBiF,iBAAiB,GAEnBJ,OAAQ,CACN9B,SAAS,GAEXmC,aAAa,EACbC,IAAK,IACLb,MAAO,CACLG,MAAO9D,EACPwE,IAAK,IACLC,IAAK,EACLC,SAAU,GACVd,KAAM,CACJC,KAAM,OAKdc,OAAQ,CACNC,QAAS,CACPjC,OAAQ,KAIZkC,QAAS,CACPC,MAAO,CACL1C,SAAS,EACT2C,KAAM,QACNjB,MAAO9D,EACPgF,SAAU,MACVC,MAAO,QACPrB,KAAM,CACJC,KAAM,KAGVqB,WAAY,CACVpB,MAAO9D,EACPmF,OAAQ,MACRF,MAAO,MACPrB,KAAM,CACJC,KAAMhE,IAAaV,mBACnBiG,OAAQ,IACRC,OAAQ,WAEVC,UAAW,SAAUnD,EAAOoD,GAC1B,OAAOC,KAAKC,MAAMtD,GAAS,GAC7B,GAEFuD,OAAQ,CACNtD,SAAS,KAKf,OACEuD,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACG7H,GACC2H,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACC,KAAM,cAEdJ,EAAAA,EAAAA,KAAC7I,EAAM,CAAA+I,UACLF,EAAAA,EAAAA,KAACK,EAAAA,GAAG,CAACrE,KAAMA,EAAM0B,QAASA,OAKpC,ECrXa4C,EAAgBlJ,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6KAEf,SAAAC,GAAK,OAAIA,EAAMC,MAAM+I,oBAAoB,IAK3D7I,EAAAA,EAAAA,GAAM,SAAU,GAAhBA,CAAmBC,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,mFAInBI,EAAAA,EAAAA,GAAM,UAAW,GAAjBA,CAAoBE,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,sJAObkJ,EAAgBpJ,EAAAA,EAAAA,IAAUS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,6FAMnCI,EAAAA,EAAAA,GAAM,SAAU,GAAhBA,CAAmBI,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,uFAMVmJ,EAAqBrJ,EAAAA,EAAAA,IAAUW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,YC9B/BoJ,EAAatJ,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0CAIvBqJ,EAASvJ,EAAAA,EAAAA,IAAUO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,+HAIrB,SAAAC,GAAK,OAAIA,EAAMC,MAAMoJ,mBAAmB,IAI/ClJ,EAAAA,EAAAA,GAAM,SAAU,GAAhBA,CAAmBE,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,uDAInBI,EAAAA,EAAAA,GAAM,UAAW,GAAjBA,CAAoBG,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,cAIXuJ,EAAczJ,EAAAA,EAAAA,IAAUU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,qGAKjCI,EAAAA,EAAAA,GAAM,SAAU,GAAhBA,CAAmBK,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,aAEnBI,EAAAA,EAAAA,GAAM,UAAW,GAAjBA,CAAoBM,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,cCHxB,EAxByB,SAAHwJ,GAASA,EAAJ9E,KAAW,IAIhC+E,EAAa,CACjB,CAAE5E,MAAO,SAAUgC,MAJA,WAKnB,CAAEhC,MAAO,WAAYgC,MAJA,YAOrB,OACE6B,EAAAA,EAAAA,KAACU,EAAU,CAAAR,SACRa,EAAW3E,KAAI,SAAC2D,EAAQiB,GAAK,OAC5BC,EAAAA,EAAAA,MAACN,EAAM,CAAAT,SAAA,EACLF,EAAAA,EAAAA,KAACa,EAAW,CACVK,MAAO,CAAExE,gBAAiBqD,EAAO5B,SAElC4B,EAAO5D,QAJG6E,EAKJ,KAIjB,EC2BA,EAtCuB,SAAHF,GAA4B,IAAtBK,EAAcL,EAAdK,eAClB3I,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IACpBG,GAAON,EAAAA,EAAAA,IAAYO,EAAAA,KAEzBgB,EAAAA,EAAAA,YAAU,WACRsH,EAAe,aACjB,GAAG,CAACA,IAEJ,IAAAnI,GAAoCC,EAAAA,EAAAA,UAAS,OAAMG,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAA5CoI,EAAUhI,EAAA,GAAEiI,EAAajI,EAAA,GAChCkI,GAA2BrI,EAAAA,EAAAA,UAAST,GAA7B+I,GAAmClI,EAAAA,EAAAA,GAAAiI,EAAA,GAAnB,GACvBE,GAA0BvI,EAAAA,EAAAA,UAASL,GAA5B6I,GAAiCpI,EAAAA,EAAAA,GAAAmI,EAAA,GAAlB,GAUtB,OACEP,EAAAA,EAAAA,MAACX,EAAa,CAAAJ,SAAA,EACZe,EAAAA,EAAAA,MAACT,EAAa,CAAAN,SAAA,EACZF,EAAAA,EAAAA,KAACS,EAAkB,CAAAP,UACjBF,EAAAA,EAAAA,KAAC0B,EAAAA,EAAe,CACdN,WAAYA,EACZO,aAAcN,EACdO,UAfQ,SAAA5F,GAEhB,QAAIA,EADgB,IAAInB,KAAK4G,EAAiBF,EAAkB,GAKlE,EAUUM,KAAM,kBAGV7B,EAAAA,EAAAA,KAAC8B,EAAgB,QAEnB9B,EAAAA,EAAAA,KAAC+B,EAAe,MAGtB,C","sources":["components/StatisticsChart/StatisticsChart.styled.jsx","components/StatisticsChart/StatisticsChart.jsx","pages/StatisticsPage/StatisticsPage.styled.jsx","components/LegendsStatistic/LegendsStatistic.styled.jsx","components/LegendsStatistic/LegendsStatistic.jsx","pages/StatisticsPage/StatisticsPage.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { media } from 'utils/queries';\n\nexport const BoxBar = styled.div`\n  border-radius: 20px;\n  border: 0.8px solid ${props => props.theme.chartBorderColor};\n\n  //   border: 0.8px solid #e3f3ff;\n  width: 100%;\n  height: 100%;\n  max-width: 307px;\n  height: 413px;\n  padding: 40px 14px;\n\n  ${media('tablet', '')`\n        padding: 32px;\n        border-radius: 29px;\n        max-width: 640px;\n        height: 424px;\n        \n            \n    `}\n  ${media('desktop', '')`   \n        padding: 40px;     \n        max-width: 860px;\n        height: 440px;\n    `}\n`;\n\nexport const BoxPeriodPaginator = styled.div` \n\n`;\nexport const ConteinerData = styled.div` \n   display: flex;\n   flex-direction: column;\n  \n   padding: 0 40px 40px;\n\n     \n    ${media('tablet', '')`\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        padding: 0 40px 40px;\n     `}\n    ${media('desktop', '')`        \n        \n        \n    `}\n`;","import { Bar } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport { selectTheme } from 'redux/selectors';\nimport { Loader } from 'components/Loader/Loader';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { BoxBar } from './StatisticsChart.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectMonth,\n  selectDay,\n  selectTasks, \n  selectYear,\n  selectIsLoadingTasks,\n} from 'redux/selectors';\nimport { getUserTasks } from 'redux/tasks/operations';\n\nimport { useEffect, useState } from 'react';\nimport { lightTheme, darkTheme } from '../../utils/colors';\n\nChart.register(...registerables);\nChart.register(ChartDataLabels);\n\nconst StatisticsChart = () => {\n  const isLoading = useSelector(selectIsLoadingTasks);\n  const month = useSelector(selectMonth);\n  const day = useSelector(selectDay);\n  const year = useSelector(selectYear);\n  const tasks = useSelector(selectTasks);\n\nconst [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\nconst fontSizeByInterest = {\n  small: 12, \n  large: 16,\n  };\n\nconst fontSizeByGroup = {\n  small: 12,  \n  large: 14,\n};\n \nconst tickWidth = {\n  small: 14,  \n  medium: 32, \n  large: 61,  \n  };  \n  \n  const maxBarThickness = {\n    small: 22,  \n    large: 27,\n};\n const categoryPercentage = {\n   small: 0.7,\n   medium: 0.5,\n   large: 0.35,\n };\n\n  \n  useEffect(() => {\n    const handleResize = () => {\n      const newWidth = window.innerWidth;\n      setWindowWidth(newWidth);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  const getSizeMin = () => {\n    if (windowWidth < 768) {\n      return {\n        maxBarThickness: maxBarThickness.small,\n        fontSizeByInterest: fontSizeByInterest.small,\n        fontSizeByGroup: fontSizeByGroup.small,\n      };\n    } else {\n      return {\n        maxBarThickness: maxBarThickness.large,\n        fontSizeByInterest: fontSizeByInterest.large,\n        fontSizeByGroup: fontSizeByGroup.large,\n      }; \n    }\n  };\n const getSizeMax = () => {\n   if (windowWidth > 1439) {\n     return {\n       tickWidth: tickWidth.large,\n       categoryPercentage: categoryPercentage.large,\n     };\n   } else if (windowWidth > 767) {\n     return {\n       tickWidth: tickWidth.medium,\n       categoryPercentage: categoryPercentage.medium,\n     };\n   } else if (windowWidth < 768) {\n     return {\n       tickWidth: tickWidth.small,\n       categoryPercentage: categoryPercentage.small,\n     };\n   }\n };\n  \n  const colorDay = '#FFD2DD';\n  const colorMonth = '#3E85F3';\n\n  const theme = useSelector(selectTheme);\n  const textColor =\n    theme === 'light'\n      ? lightTheme.statisticsTextColor\n      : darkTheme.statisticsTextColor;\n  \n  const gridColor =\n    theme === 'light'\n      ? lightTheme.chartBorderColor\n      : darkTheme.chartBorderColor;\n\n  const gradientMonth = context => {\n    const chart = context.chart;\n    const { ctx, chartArea } = chart;\n    if (!chartArea) {\n      return null;\n    }\n\n    const gradient = ctx.createLinearGradient(\n      0,\n      chartArea.bottom,\n      0,\n      chartArea.top\n    );\n    gradient.addColorStop(0, colorMonth);\n    gradient.addColorStop(1, 'rgba(62, 133, 243, 0.00)');\n\n    return gradient;\n  };\n\n  const gradientDay = context => {\n    const chart = context.chart;\n    const { ctx, chartArea } = chart; \n\n    if (!chartArea) {\n      return null;\n    }\n\n    const height = chartArea.bottom - chartArea.top; \n    const top = chartArea.top; \n\n    const gradient = ctx.createLinearGradient(0, top + height, 0, top);\n    gradient.addColorStop(0, colorDay);\n    gradient.addColorStop(0.9687, 'rgba(255, 210, 221, 0.00)');\n\n    return gradient;\n  };\n\n  const todoByDay = tasks.filter(task => {\n    const taskDate = new Date(task.date);\n    return (\n      task.category === 'to-do' &&\n      taskDate.getFullYear() === year &&\n      taskDate.getMonth() === month &&\n      taskDate.getDate() === day\n    );\n  }).length;\n  const todoByMonth = tasks.filter(task => {\n    const taskDate = new Date(task.date);\n    return (\n      task.category === 'to-do' &&\n      taskDate.getFullYear() === year &&\n      taskDate.getMonth() === month\n    );\n  }).length;\n\n  const inprogressByDay = tasks.filter(task => {\n    const taskDate = new Date(task.date);\n    return (\n      task.category === 'in-progress' &&\n      taskDate.getFullYear() === year &&\n      taskDate.getMonth() === month &&\n      taskDate.getDate() === day\n    );\n  }).length;\n\n  const inprogressByMonth = tasks.filter(task => {\n    const taskDate = new Date(task.date);\n    return (\n      task.category === 'in-progress' &&\n      taskDate.getFullYear() === year &&\n      taskDate.getMonth() === month\n    );\n  }).length;\n\n  const doneByDay = tasks.filter(task => {\n    const taskDate = new Date(task.date);\n    return (\n      task.category === 'done' &&\n      taskDate.getFullYear() === year &&\n      taskDate.getMonth() === month &&\n      taskDate.getDate() === day\n    );\n  }).length;\n\n  const doneByMonth = tasks.filter(task => {\n    const taskDate = new Date(task.date);\n    return (\n      task.category === 'done' &&\n      taskDate.getFullYear() === year &&\n      taskDate.getMonth() === month\n    );\n  }).length;\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(\n      getUserTasks({ period: 'month', date: `${year}-${month + 1}-${day}` })\n    );\n  }, [dispatch, year, month, day]);\n\n  const tasksByDay = [todoByDay, inprogressByDay, doneByDay];\n  const tasksByMonth = [todoByMonth, inprogressByMonth, doneByMonth];\n\n  const data = {\n    labels: ['To Do', 'In Progress', 'Done'],\n    datasets: [\n      {\n        label: 'By Day',\n        data: tasksByDay.map(task => {\n          const totalTasksByDay = tasksByDay.reduce(\n            (sum, value) => sum + value,\n            0\n          );\n          if (totalTasksByDay === 0) {\n            return 0;\n          }\n          return (task / totalTasksByDay) * 100;\n        }),\n        display: true,\n        backgroundColor: gradientDay,\n        borderSkipped: false,\n        maxBarThickness: getSizeMin().maxBarThickness,\n        borderRadius: {\n          bottomLeft: 10,\n          bottomRight: 10,\n        },\n      },\n      {\n        label: 'By Month',\n        data: tasksByMonth.map(task => {\n          const totalTasksByMonth = tasksByMonth.reduce(\n            (sum, value) => sum + value,\n            0\n          );\n          if (totalTasksByMonth === 0) {\n            return 0;\n          }\n          return (task / totalTasksByMonth) * 100;\n        }),\n\n        display: true,\n\n        backgroundColor: gradientMonth,\n        borderSkipped: false,\n        maxBarThickness: getSizeMin().maxBarThickness,\n        borderRadius: {\n          bottomLeft: 10,\n          bottomRight: 10,\n        },\n      },\n    ],\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    categoryPercentage: getSizeMax().categoryPercentage,\n    barPercentage: 1,\n\n    scales: {\n      x: {\n        ticks: {\n          font: {\n            size: getSizeMin().fontSizeByGroup,\n          },\n          color: textColor,\n        },\n        // barPercentage: 0.9,\n        drawBorder: false,\n\n        grid: {\n          display: false,\n          offset: true,\n        },\n        border: {\n          display: false,\n        },\n      },\n      y: {\n        responsive: true,\n        offset: true,\n        grid: {\n          color: gridColor,\n          border: {\n            display: false,\n          },\n          tickColor: 'rgba(0, 0, 0, 0)',\n          tickLength: getSizeMax().tickWidth,\n          tickWidth: getSizeMax().tickWidth,\n\n          offsetGridLines: true,\n        },\n        border: {\n          display: false,\n        },\n        beginAtZero: true,\n        max: 100,\n        ticks: {\n          color: textColor,\n          max: 100,\n          min: 0,\n          stepSize: 20,\n          font: {\n            size: 14,\n          },\n        },\n      },\n    },\n    layout: {\n      padding: {\n        bottom: 20,\n      },\n    },\n\n    plugins: {\n      title: {\n        display: true,\n        text: 'Tasks',\n        color: textColor,\n        position: 'top',\n        align: 'start',\n        font: {\n          size: 14,\n        },\n      },\n      datalabels: {\n        color: textColor,\n        anchor: 'end',\n        align: 'top',\n        font: {\n          size: getSizeMin().fontSizeByInterest,\n          weight: 500,\n          family: 'Poppins',\n        },\n        formatter: function (value, _) {\n          return Math.round(value) + '%';\n        },\n      },\n      legend: {\n        display: false,\n      },\n    },\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader type={'suspense'} />\n      ) : (\n        <BoxBar>\n          <Bar data={data} options={options} />\n        </BoxBar>\n      )}\n    </>\n  );\n};\n\nexport default StatisticsChart;\n","import styled from \"@emotion/styled\";\nimport { media } from 'utils/queries';\n\nexport const BoxStatistics = styled.div` \n    max-width: 335px;        \n    background-color: ${props => props.theme.userAvatarBackground};\n   \n    border-radius: 16px;\n    padding: 28px 14px 135px 14px;\n    width: 100%;\n    ${media('tablet', '')`\n        max-width: 704px;\n        padding: 132px 64px 224px 64px;\n    `}\n    ${media('desktop', '')`        \n        max-width: 1087px;\n        max-height: 752px; \n        padding: 134px 114px 104px 114px;     \n        margin: 0px;\n    `}\n`;\nexport const ConteinerData = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  padding-bottom: 40px;\n\n  ${media('tablet', '')`\n        flex-direction: row;\n        justify-content: space-between;\n     `}\n\n`;\nexport const BoxPeriodPaginator = styled.div`\n\n`;\n\n","import styled from '@emotion/styled';\nimport { media } from 'utils/queries';\n\nexport const LegendsBox = styled.div`\n  display: flex;\n  gap: 20px;\n`;\nexport const Legend = styled.div`\n  font-size: 14px;\n  line-height: 1.29;\n\n  color: ${props => props.theme.statisticsTextColor};\n\n  display: flex;\n  align-items: center;\n  ${media('tablet', '')`\n  font-size: 16px;\n  line-height: 1.13;\n  `}\n  ${media('desktop', '')` \n  `}\n`;\n\nexport const LegendColor = styled.div`\n  width: 8px;\n  height: 8px;\n  margin-right: 10px;\n  border-radius: 50%;\n  ${media('tablet', '')`\n  `}\n  ${media('desktop', '')` \n  `}\n`;\n","import { LegendsBox, Legend, LegendColor } from './LegendsStatistic.styled';\nimport React from 'react'\n\nconst LegendsStatistic = ({data}) => {\n    const colorDay = '#FFD2DD';\n    const colorMonth = '#3E85F3';\n\nconst legendData = [\n  { label: 'By Day', color: colorDay },\n  { label: 'By Month', color: colorMonth },\n];\n\n  return (\n    <LegendsBox>\n      {legendData.map((legend, index) => (\n        <Legend key={index}>\n          <LegendColor          \n            style={{ backgroundColor: legend.color }}\n          ></LegendColor>\n          {legend.label}\n        </Legend>\n      ))}\n    </LegendsBox>\n  );\n};\n\n\nexport default LegendsStatistic","import React, { useEffect, useState } from 'react';\nimport { CalendarToolbar } from 'layout/CalendarToolbar/CalendarToolbar';\nimport StatisticsChart from 'components/StatisticsChart/StatisticsChart';\nimport { useSelector } from 'react-redux';\nimport { selectMonth, selectYear } from 'redux/selectors';\nimport {\n  BoxPeriodPaginator,\n  BoxStatistics,\n  ConteinerData,\n} from './StatisticsPage.styled';\n\nimport LegendsStatistic from 'components/LegendsStatistic/LegendsStatistic';\n\nconst StatisticsPage = ({ updatePageName }) => {\n  const month = useSelector(selectMonth);\n  const year = useSelector(selectYear);\n\n  useEffect(() => {\n    updatePageName('Statistics');\n  }, [updatePageName]);\n\n  const [periodType, setPeriodType] = useState('day');\n  const [currentDateMonth] = useState(month);\n  const [currentDateYear] = useState(year);\n\n  const checkDate = data => {\n    const currentDate = new Date(currentDateYear, currentDateMonth, 2);\n    if (data > currentDate) {\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <BoxStatistics>\n      <ConteinerData>\n        <BoxPeriodPaginator>\n          <CalendarToolbar\n            periodType={periodType}\n            changePeriod={setPeriodType}\n            checkDate={checkDate}\n            page={'statistics'}\n          />\n        </BoxPeriodPaginator>\n        <LegendsStatistic />\n      </ConteinerData>\n      <StatisticsChart/>\n    </BoxStatistics>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["BoxBar","styled","_templateObject","_taggedTemplateLiteral","props","theme","chartBorderColor","media","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","Chart","_toConsumableArray","registerables","ChartDataLabels","isLoading","useSelector","selectIsLoadingTasks","month","selectMonth","day","selectDay","year","selectYear","tasks","selectTasks","_useState","useState","window","innerWidth","_useState2","_slicedToArray","windowWidth","setWindowWidth","fontSizeByInterest","fontSizeByGroup","tickWidth","maxBarThickness","categoryPercentage","useEffect","handleResize","newWidth","addEventListener","removeEventListener","getSizeMin","getSizeMax","selectTheme","textColor","lightTheme","darkTheme","gridColor","todoByDay","filter","task","taskDate","Date","date","category","getFullYear","getMonth","getDate","length","todoByMonth","inprogressByDay","inprogressByMonth","doneByDay","doneByMonth","dispatch","useDispatch","getUserTasks","period","concat","tasksByDay","tasksByMonth","data","labels","datasets","label","map","totalTasksByDay","reduce","sum","value","display","backgroundColor","context","chart","ctx","chartArea","height","bottom","top","gradient","createLinearGradient","addColorStop","borderSkipped","borderRadius","bottomLeft","bottomRight","totalTasksByMonth","options","responsive","maintainAspectRatio","barPercentage","scales","x","ticks","font","size","color","drawBorder","grid","offset","border","y","tickColor","tickLength","offsetGridLines","beginAtZero","max","min","stepSize","layout","padding","plugins","title","text","position","align","datalabels","anchor","weight","family","formatter","_","Math","round","legend","_jsx","_Fragment","children","Loader","type","Bar","BoxStatistics","userAvatarBackground","ConteinerData","BoxPeriodPaginator","LegendsBox","Legend","statisticsTextColor","LegendColor","_ref","legendData","index","_jsxs","style","updatePageName","periodType","setPeriodType","_useState3","currentDateMonth","_useState5","currentDateYear","CalendarToolbar","changePeriod","checkDate","page","LegendsStatistic","StatisticsChart"],"sourceRoot":""}