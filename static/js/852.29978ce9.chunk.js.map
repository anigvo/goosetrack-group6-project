{"version":3,"file":"static/js/852.29978ce9.chunk.js","mappings":"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","sources":["components/StatisticsChart/StatisticsChart.styled.jsx","components/StatisticsChart/StatisticsChart.jsx","pages/StatisticsPage/StatisticsPage.styled.jsx","components/LegendsStatistic/LegendsStatistic.styled.jsx","components/LegendsStatistic/LegendsStatistic.jsx","pages/StatisticsPage/StatisticsPage.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { media } from 'utils/queries';\n\nexport const BoxBar = styled.div`\n    border-radius: 20px;\n    border: 0.8px solid #E3F3FF;  \n    width: 100%;\n    height: 100%;\n    max-width: 307px;  \n    height: 413px; \n    \n    \n     \n    ${media('tablet', '')`\n        border-radius: 29px;\n        max-width: 640px;\n        height: 424px;\n            \n    `}\n    ${media('desktop', '')`   \n        padding: 20px;     \n        max-width: 860px;\n        height: 440px;\n    `}\n`;\n\nexport const BoxPeriodPaginator = styled.div` \n\n     \n    ${media('tablet', '')`\n           \n    `}\n    ${media('desktop', '')`        \n        \n        \n    `}\n`;\nexport const ConteinerData = styled.div` \n   display: flex;\n   flex-direction: column;\n  \n   padding: 0 40px 40px;\n\n     \n    ${media('tablet', '')`\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        padding: 0 40px 40px;\n     `}\n    ${media('desktop', '')`        \n        \n        \n    `}\n`;","import { Bar } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { BoxBar } from './StatisticsChart.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectMonth,\n  selectDay,\n  selectTasks,\n  selectYear,\n} from 'redux/selectors';\nimport { getUserTasks } from 'redux/tasks/operations';\nimport { useEffect } from 'react';\n\nChart.register(...registerables);\n\nconst StatisticsChart = () => {\n  const month = useSelector(selectMonth);\n  const day = useSelector(selectDay);\n  const year = useSelector(selectYear);\n  const tasks = useSelector(selectTasks);\n\n  const colorDay = '#FFD2DD';\n  const colorMonth = '#3E85F3';\n\n  const gradientMonth = context => {\n    const chart = context.chart;\n    const { ctx, chartArea } = chart;\n    if (!chartArea) {\n      return null;\n    }\n\n    const gradient = ctx.createLinearGradient(\n      0,\n      chartArea.bottom,\n      0,\n      chartArea.top\n    );\n    gradient.addColorStop(0, colorMonth);\n    gradient.addColorStop(1, 'rgba(62, 133, 243, 0.00)');\n\n    return gradient;\n  };\n\n  const gradientDay = context => {\n    const chart = context.chart;\n    const { ctx, chartArea } = chart;\n    if (!chartArea) {\n      return null;\n    }\n\n    // Створення градієнта замість кольорів\n    const gradient = ctx.createLinearGradient(\n      0,\n      chartArea.bottom,\n      0,\n      chartArea.top\n    );\n    gradient.addColorStop(0, colorDay);\n    gradient.addColorStop(0.9687, 'rgba(255, 210, 221, 0.00)');\n\n    return gradient;\n  };\n\n  const todoByDay = tasks.filter(task => {\n    const taskDate = new Date(task.date);\n    return (\n      task.category === 'to-do' &&\n      taskDate.getFullYear() === year &&\n      taskDate.getMonth() === month &&\n      taskDate.getDate() === day\n    );\n  }).length;\n  const todoByMonth = tasks.filter(task => {\n    const taskDate = new Date(task.date);\n    return (\n      task.category === 'to-do' &&\n      taskDate.getFullYear() === year &&\n      taskDate.getMonth() === month\n    );\n  }).length;\n\n  const inprogressByDay = tasks.filter(task => {\n    const taskDate = new Date(task.date);\n    return (\n      task.category === 'in-progress' &&\n      taskDate.getFullYear() === year &&\n      taskDate.getMonth() === month &&\n      taskDate.getDate() === day\n    );\n  }).length;\n\n  const inprogressByMonth = tasks.filter(task => {\n    const taskDate = new Date(task.date);\n    return (\n      task.category === 'in-progress' &&\n      taskDate.getFullYear() === year &&\n      taskDate.getMonth() === month\n    );\n  }).length;\n\n  const doneByDay = tasks.filter(task => {\n    const taskDate = new Date(task.date);\n    return (\n      task.category === 'done' &&\n      taskDate.getFullYear() === year &&\n      taskDate.getMonth() === month &&\n      taskDate.getDate() === day\n    );\n  }).length;\n\n  const doneByMonth = tasks.filter(task => {\n    const taskDate = new Date(task.date);\n    return (\n      task.category === 'done' &&\n      taskDate.getFullYear() === year &&\n      taskDate.getMonth() === month\n    );\n  }).length;\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(\n      getUserTasks({ period: 'month', date: `${year}-${month + 1}-${day}` })\n    );\n  }, [dispatch, year, month, day]);\n\n  const tasksByDay = [todoByDay, inprogressByDay, doneByDay];\n  const tasksByMonth = [todoByMonth, inprogressByMonth, doneByMonth];\n\n  const data = {\n    labels: ['To Do', 'In Progress', 'Done'],\n    datasets: [\n      {\n        label: 'By Day',\n        data: tasksByDay.map(\n          task =>\n            (task / tasksByDay.reduce((sum, value) => sum + value, 0)) * 100\n        ),\n        display: true,\n        backgroundColor: gradientDay,\n        borderSkipped: false,\n        maxBarThickness: 27,\n        borderRadius: {\n          bottomLeft: 10,\n          bottomRight: 10,\n        },\n      },\n      {\n        label: 'By Month',\n        data: tasksByMonth.map(\n          task =>\n            (task / tasksByMonth.reduce((sum, value) => sum + value, 0)) * 100\n        ),\n        display: true,\n        backgroundColor: gradientMonth,\n        borderSkipped: false,\n        maxBarThickness: 27,\n        borderRadius: {\n          bottomLeft: 10,\n          bottomRight: 10,\n        },\n      },\n    ],\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    categoryPercentage: 0.3,\n    barPercentage: 0.9,\n    scales: {\n      x: {\n        ticks: {\n          font: {\n            size: 14,\n          },\n        },\n        barPercentage: 0.1,\n        drawBorder: false,\n\n        grid: {\n          display: false,\n          offset: true,\n        },\n        border: {\n          display: false,\n        },\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Tasks',\n          position: 'top',\n        },\n        offset: true,\n\n        grid: {\n          color: 'rgba(227, 243, 255, 1)',\n          border: {\n            display: false,\n          },\n          offsetGridLines: true,\n        },\n        border: {\n          display: false,\n        },\n        beginAtZero: true,\n        max: 100,\n        ticks: {\n          max: 100,\n          min: 0,\n          stepSize: 20,\n          font: {\n            size: 14,\n          },\n        },\n      },\n    },\n    layout: {\n      padding: {\n        bottom: 20,\n      },\n    },\n\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n  };\n\n  return (\n    <>\n      <BoxBar>\n        <Bar data={data} options={options} />\n      </BoxBar>\n    </>\n  );\n};\n\nexport default StatisticsChart;\n","import styled from \"@emotion/styled\";\nimport { media } from 'utils/queries';\n\nexport const BoxStatistics = styled.div` \n    max-width: 335px;        \n    background-color: ${props => props.theme.userAvatarBackground};\n   \n    border-radius: 16px;\n    padding: 128px 14px 175px 14px;\n    width: 100%;\n    ${media('tablet', '')`\n        max-width: 704px;\n        padding: 132px 64px 224px 64px;\n    `}\n    ${media('desktop', '')`        \n        max-width: 1087px;\n        max-height: 752px; \n        padding: 134px 114px 104px 114px;     \n    `}\n`;\nexport const ConteinerData = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 40px 40px;\n\n  ${media('tablet', '')`\n        flex-direction: row;\n        justify-content: space-between;\n        \n        \n     `}\n  ${media('desktop', '')`        \n        \n        \n    `}\n`;\nexport const BoxPeriodPaginator = styled.div`\n  ${media('tablet', '')`\n    \n    `}\n  ${media('desktop', '')`        \n        \n        \n    `}\n`;\n\n","import styled from \"@emotion/styled\";\nimport { media } from 'utils/queries';\n\nexport const LegendsBox = styled.div`\n  display: flex;\n  ap: 20px;\n\n  \n`;\nexport const Legend = styled.div`\n\n\n  display: flex;\n  \n  align-items: center;\n`;\n\n  export const LegendColor = styled.div`\n    width: 8px;\n    height: 8px;\n    margin-right: 10px;\n    border-radius: 50%;\n    ${media('tablet', '')`\n  `}\n    ${media('desktop', '')` \n  `}\n`;\n\n ","import { LegendsBox, Legend, LegendColor } from './LegendsStatistic.styled';\nimport React from 'react'\n\nconst LegendsStatistic = ({data}) => {\n    const colorDay = '#FFD2DD';\n    const colorMonth = '#3E85F3';\n\nconst legendData = [\n  { label: 'By Day', color: colorDay },\n  { label: 'By Month', color: colorMonth },\n];\n\n  return (\n    <LegendsBox>\n      {legendData.map((legend, index) => (\n        <Legend key={index}>\n          <LegendColor          \n            style={{ backgroundColor: legend.color }}\n          ></LegendColor>\n          {legend.label}\n        </Legend>\n      ))}\n    </LegendsBox>\n  );\n};\n\n\nexport default LegendsStatistic","import React, { useEffect, useState } from 'react';\nimport { CalendarToolbar } from 'layout/CalendarToolbar/CalendarToolbar';\nimport StatisticsChart from 'components/StatisticsChart/StatisticsChart';\nimport { useSelector } from 'react-redux';\nimport { selectMonth, selectYear } from 'redux/selectors';\nimport {\n  BoxPeriodPaginator,\n  BoxStatistics,\n  ConteinerData,\n} from './StatisticsPage.styled';\nimport LegendsStatistic from 'components/LegendsStatistic/LegendsStatistic';\n// import { Loader } from 'components/Loader/Loader';\nconst StatisticsPage = ({ updatePageName }) => {\n  const month = useSelector(selectMonth);\n  const year = useSelector(selectYear);\n\n  useEffect(() => {\n    updatePageName('Statistics');\n  }, [updatePageName]);\n\n  const [periodType, setPeriodType] = useState('day');\n  const [currentDateMonth] = useState(month);\n  const [currentDateYear] = useState(year);\n\n  const checkDate = data => {\n    const currentDate = new Date(currentDateYear, currentDateMonth, 2);\n    if (data > currentDate) {\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <BoxStatistics>\n      <ConteinerData>\n        <BoxPeriodPaginator>\n          <CalendarToolbar\n            currentDateMonth={currentDateMonth}\n            currentDateYear={currentDateYear}\n            periodType={periodType}\n            changePeriod={setPeriodType}\n            checkDate={checkDate}\n            page={'statistics'}\n          />\n        </BoxPeriodPaginator>\n        <LegendsStatistic />\n      </ConteinerData>\n      {/* <Suspense fallback={<Loader type={'suspense'} />}>\n        <Outlet\n          context={[\n            startOfWeekDate,\n            daysToAdd,\n            today,\n            setPeriodType,\n            pickHandler,\n            checkDate,\n          ]}\n        />\n      </Suspense> */}\n      <StatisticsChart\n      // todoByDay={todoByDay}\n      // todoByMonth={todoByMonth}\n      // inprogressByDay={inprogressByDay}\n      // inprogressByMonth={inprogressByMonth}\n      // doneByDay={doneByDay}\n      // doneByMonth={doneByMonth}\n      />\n    </BoxStatistics>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["BoxBar","styled","_templateObject","_taggedTemplateLiteral","media","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","Chart","_toConsumableArray","registerables","month","useSelector","selectMonth","day","selectDay","year","selectYear","tasks","selectTasks","todoByDay","filter","task","taskDate","Date","date","category","getFullYear","getMonth","getDate","length","todoByMonth","inprogressByDay","inprogressByMonth","doneByDay","doneByMonth","dispatch","useDispatch","useEffect","getUserTasks","period","concat","tasksByDay","tasksByMonth","data","labels","datasets","label","map","reduce","sum","value","display","backgroundColor","context","chart","ctx","chartArea","gradient","createLinearGradient","bottom","top","addColorStop","borderSkipped","maxBarThickness","borderRadius","bottomLeft","bottomRight","_jsx","_Fragment","children","Bar","options","responsive","maintainAspectRatio","categoryPercentage","barPercentage","scales","x","ticks","font","size","drawBorder","grid","offset","border","y","title","text","position","color","offsetGridLines","beginAtZero","max","min","stepSize","layout","padding","plugins","legend","BoxStatistics","props","theme","userAvatarBackground","ConteinerData","BoxPeriodPaginator","LegendsBox","Legend","LegendColor","_ref","legendData","index","_jsxs","style","updatePageName","_useState","useState","_useState2","_slicedToArray","periodType","setPeriodType","_useState3","currentDateMonth","_useState5","currentDateYear","CalendarToolbar","changePeriod","checkDate","page","LegendsStatistic","StatisticsChart"],"sourceRoot":""}